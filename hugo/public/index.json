[{"categories":["Diary"],"content":"Docker と勉強方法 Docker とはなんぞや？ Docker 公式のドキュメント 開発中のソフトウェアを他のエンジニアと共有したり、 プロトタイプをサクッと試してもらいたい時などはもはや必須といえるんじゃなかろうか。 無料だし（なんか最近有料化の流れもあるけど） この記事では、Docker の使い方と（ちょっと）仕組みと（ちょっと）周辺技術をまとめてみたのでそれらを紹介する 書籍に書いてある内容とこの記事の中身は違うので気になる人は実際に読んでみてね ","date":"2021-08-29","objectID":"/docker/:1:0","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"参考書の紹介 docker docs 公式の文章は重要なのですが、今回は言葉の定義を確認したいときなどを中心に辞書的に使いました。 さわって学ぶクラウドインフラ docker基礎からのコンテナ構築 | 日経BP タイトルは\"クラウド\"に限定されているように見えるが中身はタイトルほど\"クラウド\"に限定していないように見える そもそも Docker は\"クラウド\"のためだけのインフラでないことは明確ですが、 それだけにこのタイトルの場合はもう少しクラウド取り扱っていても良かったのかなぁと 内容的に少しだけ引っかかるところがあったのでそれは本記事の最後にまとめておくわね。 図表は分かりやすかった！ Docker | O’REILLY 難易度としては上の本よりも数段上にあり、Docker や Docker の構成要素を少し深くまで学習することができた Ansible や Trition などの Docker が関連するソフトウェアも幅広く紹介していて、知識の幅も広がる 一方でポイントを絞って学ぶという観点では範囲が広すぎるので、 「俺は使うのに必要最小限の知識だけあればいいぜ！」という人には向いていないかも知れない本 幅広く、でも重要なところは取りこぼしたくなので、上の本と組み合わせて学習することに 結果、1ヶ月もせずあんなに知らんかった Docker の理解が確実に進んだのでこの学習方法は合う人には合うかも ","date":"2021-08-29","objectID":"/docker/:1:1","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"Docker まとめ Docker を使うと、host OS との resource 共有、Container の Portability、軽量なので実動環境そのままの分散システムを emulate できたりと、メリットたくさんあるよ Docker は scale-out が容易に行えるので micro service も use case として挙げられるよ ","date":"2021-08-29","objectID":"/docker/:2:0","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"Dockerfile からイメージを作成 Dockerfileに記述できる命令は以下のようになっている Command Description FROM DOckerfile のベースイメージを設定 LABEL ラベルの設定。MAINTAINER とかも時が経ちこれで指定させるようになりました ADD イメージへファイルをコピー。他の選択肢として COPY や RUN curl なども選択肢にある（詳しい違いは省略） COPY イメージへファイルをコピー RUN 指定された命令とコンテナ内で実行 CMD コンテナ起動後に指定された命令を実行 ENTRYPOINT コンテナ起動時に実行される実行可能ファイルを設定 ENV イメージ内の環境変数を設定し、記述以降参照可能 EXPOSE Dockerに対し、プロセスが指定されたポート、もしくはポート群で待ち受けを行うことを指定 WORKDIR これ以降のRUN、CMD、ENTRYPOINT、ADD、COPYで使われる作業ディレクトリを設定 引数の動きを確認する FROMdebianRUN apt update \u0026\u0026 apt install -y cowsay fortuneCOPY entrypoint.sh /ENTORYPOINT [\"/entrypoint.sh\"] #!/bin/bash if [ $# -eq 0];then /usr/games/fortune | /usr/games/cowsay else /usr/games/cowsay \"$@\" fi docker build docker build -t test/cowsay-docker file ","date":"2021-08-29","objectID":"/docker/:2:1","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"docker image command $ docker image ls : 保存されているイメージを全て表示 $ docker image history okmt_nginx:lastet : okmt_nginxイメージのレイヤを表示する docker image rmi -f $(docker image ls -a -f \"dangling=true\" -q) : :となっているどうしようもないイメージを削除する $ docker image prune : 上と同じ効果 ","date":"2021-08-29","objectID":"/docker/:2:2","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"docker container command $ docker container run -it debian /bin/bash : debianコンテナを起動し、bashでログイン（-it でインタラクティブな端末で接続） $ docker container run --name okmt-httpd -p 8080:80 -v \"$PWD:/usr/local/apache2/htdocs/ httpd:2.4\" : current directory を web server の公開 directory に mount して起動する（–name でコンテナ名前を指定して起動、-v でローカルディレクトリのマウント、-p でポートの指定、ちなみに、-d でバックグラウンドで実行） $ docker container ls : コンテナ一覧を表示 $ docker container ls -aq -f status=exited : 停止したコンテナIDを全て表示 $ docker continaer rm -v $(docker container ls -aq -f status=exited) : 停止したコンテナを全て削除（上記コマンドを利用したいなら alias 貼っとくのが良いかも？自分は docker-rm-exited で登録してる） $ docker container inspect okmt-httpd : コンテナの詳しい情報（引数、状況、ネットワーク構成）を表示 $ docker container logs okmt-httpd : コンテナ内で起きたことのリストを表示 $ docker container diff okmt-httpd : コンテナ内で変更されたファイルのリストを表示 $ docker container logs okmt-httpd : コンテナのログを表示（-f で表示し続ける） ","date":"2021-08-29","objectID":"/docker/:2:3","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"総括 勉強よりもまとめることの方がしんどかった！ で、これをちゃんと学んでみて確信に変わったのが Docker はやはりインフラエンジニアのやることでなく、 アプリケーションエンジニアとしての素養として身につけておいて良いってこと。 ","date":"2021-08-29","objectID":"/docker/:3:0","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"さわって学ぶクラウドインフラ（Kindle版）の気になったところ いずれも細かいことであります！ 気になる点 1 docker container ls と docker ps がある -\u003e そうだね この本では短いコマンドを使いたいので docker ps を使う -\u003e まぁ分かる docker image ls を使う -\u003e その流れだと使うのは docker images では？ 気になる点 2 これは誤植かと思いますが、図表4-6の「-v “SPWD”:/usr/local/apache2/htdocs」は 「-v “$PWD”:/usr/local/apache2/htdocs」かも知れません。 ","date":"2021-08-29","objectID":"/docker/:3:1","tags":["Certification","LPIC","Linux"],"title":"Docker を学んでみよう（本読み感想含む）","uri":"/docker/"},{"categories":["Diary"],"content":"Compact-CAS (Compact-CameraAndStorage) 日本では、監視カメラシステムの設置は非常に高い 高齢化による空き巣の増加やコロナを考慮した外出自粛で監視カメラを設置する需要は増していると思う さらに、昨今の人工知能分野の発展で画像さえあれば何か面白いことができてしまうのでできることならデータをたくさん蓄えておきたい さて、日本の製品としての監視カメラシステムはどれくらい高いのか？ 初期費用で数万飛ぶだけでなく、データを貯めようとするとクラウドを利用したりして月額利用料なども支払う必要がある しかし、この大金の捻出はIoTの民主化で解決できる 今日は Compact-CAS を紹介したい Compact-CAS (Compact-CameraAndStorage) This is Compact-CAS (Compact-CameraAndStorage), which provides cameras, storage, and even a web service to check the data. Based on this manual, you can inexpensively build a surveillance camera system for which you want historical data. All you need is as simple as a single Linux machine (e.g. Ubuntu, Raspberry Pi OS), a camera (e.g. sensor type, USB connected), and storage (e.g. SSD, HDD). こう書いてあるけど、簡単にいうと「Webカメラで動体検知して画像・動画をSSDに保存していく、ストレージ一体化の監視カメラ」のことである 機能を見ていこう まずは Apache の list directory をそのまま用いているのだけど、日付ごとに directory が違うので、このままでも比較的ログは追いやすい それでは、既存比較したものを表で見てみよう ○/△/x Product マネジメントコンソール Column 2 Scalability Cost Compact-CAS Cell A-1 Cell A-2 ○ ○ これ Cell B-1 Cell B-2 x △ これ Cell B-1 Cell B-2 x △ これ Cell B-1 Cell B-2 x △ これ Cell B-1 Cell B-2 x △ バイアスもかかってるだろうし、抜け漏れ勘弁 カメラ 1台、SSD 1台で Compact-CAS 運用する方法は上記のドキュメントの方にまとめてあるので、ここでは複数台同時に setting する方法を紹介する ","date":"2021-09-01","objectID":"/ccas/:1:0","tags":["Certification","LPIC","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"pssh を使った RPi の複数台セッティング pssh は SSH の並列実行できるコマンドで、Ubuntu や Mac、Windows で配布されている これを使って4台のRPiに同時にCompact-CASをインストールしていこうと思ふ PRi の setup は各自に任せる 自分は Ubuntu 20.04 LTS をインストールした microSD を RPi4 に差して、ネットワークを固定IPを振って ssh鍵認証、SSHポート変更、まで set up した状態からスタートする Mac で brew が使えるなら以下で入る $ brew install pssh psshのファイルができたら、なんでも良いのでファイルを作ってそこにsshしたいホストを列挙していく 私は以下のファイルをccas.txtという名前で保存した ccas1 ccas2 ccas3 ccas4 .ssh/configはこんな感じで用意した $ cat .ssh/config Host ccas1 HostName 172.16.0.40 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt Host ccas2 HostName 172.16.0.41 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt Host ccas3 HostName 172.16.0.42 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt Host ccas4 HostName 172.16.0.43 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt これで実行したいコマンドとccas.txtをpsshに渡すと、各RPiで並列的にコマンドが実行できる $ pssh -h ccas -i \"ls\" [1] 23:18:56 [SUCCESS] ccas1 bv_ror_on_docker Desktop Documents Downloads Music Pictures Public Templates Videos [2] 23:18:56 [SUCCESS] ccas3 [3] 23:18:56 [SUCCESS] ccas2 [4] 23:18:56 [SUCCESS] ccas4 以上の結果、txtファイルの順番通りじゃないのは、コマンドの実行結果が返却された順番に出力されているからなのかなと思ってます。 余談だけど ccas1 は Ubuntu Desktop なので default で Desktop や Downloads が生成されているけど、ccas2-4 は Ubuntu Server なので初期状態の home directory には何もない sudo は以下のコマンドのようにして、適当なファイルにパスワードを書いてそれを読み込ませる $ cat passwd | pssh -h ccas -x '-tt' --inline-stdout -I \"sudo whoami\" [1] 23:41:01 [SUCCESS] manager1 [sudo] password for okmt: root [2] 23:41:03 [SUCCESS] ccas3 [sudo] password for okmt: root [3] 23:41:03 [SUCCESS] ccas2 [sudo] password for okmt: root まぁこれでなんとか無理やりsudoを使ったけど、.*_history に入るよりはマシな運用だと思って見逃されたい 用済みになったパスワード直書きファイルは必ず削除してください てことでgithubの手順通りCompact-CASをインストールする $ cat passwd | pssh -h ccas -x '-tt' --inline-stdout -I \"sudo apt install -y v4l-utils\" ","date":"2021-09-01","objectID":"/ccas/:2:0","tags":["Certification","LPIC","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"USBTemper USBTemper、一見ものすごく怪しい製品だけど、SwitchBotに比べて1,000yen安い ","date":"2021-09-01","objectID":"/ccas/:3:0","tags":["Certification","LPIC","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"Ubuntu 20.04 on RPi に hcitool をインストールする $ sudo apt-get update $ sudo apt-get install libdbus-1-dev libdbus-glib-1-dev libglib2.0-dev libical-dev libr eadline-dev libudev-dev libusb-dev make $ cd /usr/src/ $ sudo wget https://www.kernel.org/pub/linux/bluetooth/bluez-5.34.tar.xz $ sudo xz -d bluez-5.34.tar.xz $ sudo tar xvf bluez-5.34.tar $ cd bluez-5.34 $ sudo ./configure --disable-systemd $ sudo make $ sudo make install ","date":"2021-09-01","objectID":"/ccas/:3:1","tags":["Certification","LPIC","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"終わりに 今回の自立型の監視カメラシステムの実装には難解なプログラミングも必要もない このような基本的なIoT構築は個人レベルで簡単に行うことができる ところで実家の畑に複数種類の動物が出現して野菜を荒らしているらしい… これを踏まえてCompact-CASをベースに暗視できるようなセンサを用いて野外用監視カメラシステムを組んでみることを考えている ","date":"2021-09-01","objectID":"/ccas/:4:0","tags":["Certification","LPIC","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"LPIC（Linux Professional Institute Certification） Linux と仲良くするために区切りもあった方が良いだろうと資格調べてたらこれに出会ったし、電光石火の如く資格を取得してきた LPIC (Linux Professional Institute Certification) Linux Essentials は、Linux を初めて使用する方のためのプロフェッショナル開発認定プログラムです。Linux Essentials の認定資格は、Linux でキャリアをスタートする人や、基本的な Linux スキルを証明したい IT 部門の方々に最適です。 LinuC との違いは気にするな、多分ちゃんと Linux 分かってればどっちも受かる 主は LPIC 派ということ。それだけ。 ","date":"2021-08-29","objectID":"/lpic1/:1:0","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"勉強方法 前提として主は新卒1年目のソフトウェアエンジニアだけど普段の仕事が Linux と関わり深いわけではないので、同じような境遇の方に参考になるのではなかろうか 教材は何を使っても大差ないんだろうな、と思っている 主はこの一冊しか使っていないです。（あずき本とかping-tとかもいっさい触らず） 大体の人は 「あずき本 -\u003e 問題集 -\u003e ping-t」 「あずき本 -\u003e ping-t」 とかだと思うのでコスパ目指すならそっちの方が良いと思う。知らんけど 各試験勉強期間は 2 weeks くらい 主は意外なことに平日はちゃんと働いていて、仕事後に毎日ちょっとずつって感じ 問題集を2周読んだあたりからなんかいける気がしたので受験した。 ","date":"2021-08-29","objectID":"/lpic1/:1:1","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"受験 近くのセンターで受験したけど Online Exam もできるので、会場に行くのが嫌な人はそっちを選ぼう あと、あまり色んなブログで言及はされてないけど、日本語問題文が思ってたよりひどい 特に自分の場合は LPIC 102 がひどかった 「コマンドの結果が印刷される」って問題文があったので、cups (common UNIX printing system) の話かと思ったけど、 違和感を感じたので英語文を表示してみると「printing out」が「出力」でなく「印刷」と訳されているだけでした あと「リーティングプロトコル」という謎の言葉も出きていたが、英語文をみると「Routing Protocols」であったり、 問題文が「example.com」なのに回答が全て「example.org」となっていたり、、、、 それを除くと、「こんなん解けるか！」っていう激ムズ問題は1, 2問くらいしかなかったのでちゃんと勉強した人は良心的な試験と言えるかも（なら主はもっと点数とれ） ","date":"2021-08-29","objectID":"/lpic1/:1:2","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"受験結果 にしても60問ってどう考えても少ないなって思うな、自分は LPIC 101 も LPIC 102 も試験開始10分で復習まで終わって回答終了ボタン押して退室した 知ってるか知らないかの問題が多いので大体の人こうなると思う ただ、思ったより結果良くなかったので慢心は良くないと感じた Title score Date LPIC 101 640/800 2021/07/24 LPIC 102 630/800 2021/08/29 他の人のブログでは 750 とか取ってる人いるけど、暗記完璧ですげぇ…とか思っている LPIC level 2 も問題集眺めてる感じ難易度はそんなに変わらなさそうなので早めに受けたいなー LPIC に関してはLinux の知識さえ入ればよくて落ちても良いくらいに思ってるんですが、最高レベル到達まで試験5つってやっぱ多すぎん？ ","date":"2021-08-29","objectID":"/lpic1/:1:3","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Documentation"],"content":"静的サイトジェネレータ（Static Site Generator） SSGは入力ファイルから静的ページを構築するためのツール 表で紹介するものはMarkdownコンテンツを取り込み、テンプレートを適用してCMS用ですぐ利用できるもので、本 Blog では Hugo を使っている SSG Framework Lang Description Hugo Golang ナウいしビルド早い Gatsby JavaScript (React) ナウいしテーマ多い Jykill Ruby 古い 表に知名度と自由度の高い Next.js Nuxt.js は入れてないヨ 動的 CMS には WordPress なんかがあって、これはユーザがサイトにアクセスするたびに必要に応じてページを構築する 静的 CMS は Adobe Dreamweaver や Movable Typed 等でこれは SSG と同じ仕組みで動いている 実は自分用のメモとかには Jykill 使ってて、ローカルに Git Repository 立ててメモを管理している 記事やメモを色んな Server から Origin にアップし続けるだけでドキュメントがウェブサービスで見れるようになるので便利だなー、と。 体感したことはないけど、Jykill は Hugo なんかよりビルド速度がかなり遅いらしい Gatsby はフロントエンドエンジニアとの相性が良いように思える ","date":"2021-08-28","objectID":"/hugo/:1:0","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Documentation"],"content":"Hugoの利用 Hugo のインストールは公式インストール方法通り よく使う hugo コマンドだけ軽くまとめた Command Description hugo ビルドを行う hugo check ビルドできるかチェックする hugo server ビルドを行なってサーバを立てる hugo server -p 8080 ビルドを行なってポート指定してサーバを立てる ","date":"2021-08-28","objectID":"/hugo/:1:1","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Documentation"],"content":"テーマの適用 公式サイトで紹介されているhugo themesの中から好きなテーマを選び放題 テーマの適用方法は 公式Manual通りでできそう LoveIt という誰もが使いそうな Lovery な Theme があるので、このサイトでもそれを使っている Theme Loveit ただ、自分の場合は、hugo serveでエラーが出たので、(このサイト)[https://zhuanlan.zhihu.com/p/262906525]の内容を実装しないと hugo serve が実行できなかった。 Hugo は基本的には Markdown で記述できるが、Inline HTML も使えるので、拡張性にはさほど困らない。 Markdown Syntax for LoveIt 数式表現がTEXでできるのは個人的にポイント高い \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 使いたい画像が png であることが多く、よく ImageMagick を使って jpg に変換する $ convert hogehoge.png -quality 100 hogehoge.jpg ","date":"2021-08-28","objectID":"/hugo/:1:2","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Documentation"],"content":"Docker でビルドしてデプロイ Hugo を Docker で扱うには、こんなイメージもあるのでそれを利用して、Deployまで持っていけると思う ただ、hugo serverで実行した場合は、huge server なるもので配信しているのでこれを nginx で配信するようにしたい hugo server は公式では「A high performance webserver」って紹介されていて、ほんまか？って感じやけど、同時に Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy. ということでもあるのでこだわる人は Apache やら Nginx に乗り換えるのが良さそう とりま Hugo が動く Dockerfile は発見 Dockerfile | hugo-extended-docker これを元に作ってみる ","date":"2021-08-28","objectID":"/hugo/:2:0","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Documentation"],"content":"docker-compose によるビルド 出来上がった docker-compose はこんな感じ hugo_nginx version: '3' services: hugo: build: ./hugo volumes: - ${PWD}/hugo:/src nginx: build: ./nginx depends_on: - hugo ports: - \"8081:80\" volumes: - ./hugo/public:/usr/share/nginx/html hugo image で build し、nginx で出来上がった静的ファイルを配信している これを使用方法は $ docker-compose up で hugo による build が走り、変更が反映されて Nginx で配信される Build も Deploy も Theme には依存していないので任意の hugo project に使用できると思います。 hugo の Build 早いなぁ、Nginx の server 起動の方が時間かかってそう FROMが複数あるDockerfileを docker docs で言われるところのマルチステージビルドにはなっていないので注意すること マルチステージビルド(multi stage build) マルチステージビルドはめっちゃ簡単にいうと Dockerfile に FROM が複数指定されていて、各レイヤをできる限り小さく保ち、効率的なビルド環境を構築すること こんな感じの記事を月一くらいで書けたらな、と思っているので良いなと思ったら記事のシェアとかTwitterをフォローしてください。 ","date":"2021-08-28","objectID":"/hugo/:2:1","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"}]