[{"categories":["Diary"],"content":"IoTシステム技術検定について IoTに関して独学過ぎて体系的に学ぶ必要を勝手に感じたので適当に試験を調べてみて民間試験のIoTシステム技術検定を受けた この試験は基礎（受験料 11,000yen）・中級（15,400yen）・上級（55,000yen）とあるが、上級高すぎるので基礎と中級を受けることにした テキストは基礎ならIoT技術テキスト 基礎編、中級ならIoTシステム技術検定 中級 一応公式テキストでこれ以外に参考書などはないので受験者は必須アイテムになるはず 基礎はCBT試験だし、中級は筆記だけど試験問題は回収されるので過去問は出回っていない ","date":"2022-01-19","objectID":"/iotcertificate/:1:0","tags":["Certification","IoT"],"title":"IoTシステム技術検定 基礎・中級を取得した","uri":"/iotcertificate/"},{"categories":["Diary"],"content":"勉強方法 基本的には合否発表後も点数は発表されないので、自分が何点取ったのか分からないので目安が立てにくいのがこの試験の特徴。 自身の体感では基礎は85%、中級は65%くらいの出来だったはず。巷で言われている合格点が60%程度ということなので中級は内心ヒヤヒヤだった。 基礎は第11回試験の2021/11/27(土)、中級は第11回試験の2021/12/11(土)を受験した 基本的に試験範囲が広くなるので（勉強した感じ出題範囲が細かくなる印象）、期間を開けずに基礎・中級を取り切るのがコツだと思っている IoTに従事している方や知見がある方は基礎は必要なく、中級だけでも良いかもしれない 主はただのソフトウェアエンジニア1年生なのでまず基礎から受けることにしていた 公式テキストをしっかり読んでいると落ちることはないはず テキストは全体的に重要で最後の方まで意外と細かいところから出題された印象なので、受験日前日までには1周読むのは必須としておきたい（実は1周も読めてなかったのは秘密） 基礎は「VPN」の問題を落としたのがショックだった 中級は「画像センサーの原理」「免許不要の無線局」の問題を落としたのが印象的だった だいぶ日が経過したときに記事を書いているので落とした問題についてしか覚えてない 計算問題とかは皆無で知ってるか知ってないかの問題しか出ないので、当日までにIoTシステム技術検定用に脳内のメモリを用意しておくのが良い 受験日前日・当日はピンポイントでここが出た気がするという感想文がネットに落ちてたりするので、そこでポイントを絞って頭に詰め込む ほぼ大学の期末のような感覚で噛み砕いていない文字列を頭に詰め込み、試験会場に着いて回答用紙に流し込む 当初息巻いていた体系的にIoTを学ぶんだというプライドはもうない あとは1ヶ月後の合格発表を待つだけ。。 初級はMCPCの名の下に「IoTアドバイザー」を名乗ることができる 中級はMCPCの名の下に「IoTエキスパート」を名乗ることができる 認定日同じだった。 ","date":"2022-01-19","objectID":"/iotcertificate/:2:0","tags":["Certification","IoT"],"title":"IoTシステム技術検定 基礎・中級を取得した","uri":"/iotcertificate/"},{"categories":["Diary"],"content":"IoT検定 IoTに関する試験でIoTシステム技術検定とよく引き合いに出されるのはIoT検定という民間試験だけど、 自分が見た感じIoTシステム技術検定に比べると試験の準備が遅れている印象で、なんか難易度の高い試験に関しては準備中だった。 どっちでもよかったけど通信系の組織が運営してるのが刺さったのとなんか名前が強そうだったのでIoTシステム技術検定にした。 ","date":"2022-01-19","objectID":"/iotcertificate/:2:1","tags":["Certification","IoT"],"title":"IoTシステム技術検定 基礎・中級を取得した","uri":"/iotcertificate/"},{"categories":["Diary"],"content":"総括 My name is IoT エキスパート, but 実装デキナイ。 所詮資格なので実技が伴うようにちゃんと勉強し続けたいというこってす。 ","date":"2022-01-19","objectID":"/iotcertificate/:2:2","tags":["Certification","IoT"],"title":"IoTシステム技術検定 基礎・中級を取得した","uri":"/iotcertificate/"},{"categories":["Diary"],"content":"Dockerをある程度学んだので利用するメリット、最低限知っておきたい使い方と参考書物の感想をまとめてみたのでそれらを紹介する 個人的にDockerが結構好きというのもあるが、初めて使ったときその手軽さにかなり驚いたのを覚えていて、本記事が布教に役立てばと思っている。 ","date":"2021-11-01","objectID":"/docker/:0:0","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"Dockerとは？ Docker とはコンテナ化仮想化アプリケーション実行環境プラットフォームである。 公式サイトから抜粋すると、Dockerは下のように説明されている。 Docker Docker takes away repetitive, mundane configuration tasks and is used throughout the development lifecycle for fast, easy and portable application development - desktop and cloud. Docker’s comprehensive end to end platform includes UIs, CLIs, APIs and security that are engineered to work together across the entire application delivery lifecycle. 高速で簡単でポータブル（fast, easy and portable）なアプリケーション開発環境として、開発ライフサイクル(development lifecycle)全体で利用できるよ 反復的な構築作業(mundane configuration tasks)から解放させてくれるよ DockerというプラットフォームはUI, CLI, API, セキュリティなどあらゆるデリバリーライフサイクルを包括的に提供できるよ 欲張りすぎな説明に見えるかもしれないが、言い過ぎではない。 ","date":"2021-11-01","objectID":"/docker/:1:0","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"よく取り上げられるメリット Infrastructure as Code: インフラをコード化することで、その冪等性を利用してコピーやスケールが用意になるなどのメリットがある 軽量: DockerはVMに比べるとサイズ的に軽量で、実行時に必要なシステムリソースも少ない コスト: IaCにより環境構築などのイニシャルコスト、冪等性によりランニングコストを抑えることができる。 ポータブル: アプリケーション実行環境を配布しやすい。配布に特化したDocker Hubというネットワークシステムもある。 DevOps: スクラップ\u0026ビルドも用意で、日々のリリースサイクルがスムーズになる 以上の5つは完全に独立しておらず、関係しながらも互いに成立している ポイント1: IaC(Infrastructure as Code) コスト・スピード・リスクの観点からメリットが語られることが多い コスト: 繰り返される手作業を排除して、エンジニアが他の作業に集中できる スピード: インフラを自動がすることで高速な実行が期待できる リスク: 人的ミスを排除することで信頼性が向上する IaCを活用しインフラを構成するツールの総称をCCA(Continuous Configuration Automation)と呼び、代表的なものにはAnsibleやChefなどがある ポイント2: 軽量 VMに比べて実行に必要な必要なシステムリソースが少なく、実行環境を選ばない AlpineやDebian Slimなどの軽量イメージを元にImageを作成したりマルチステージビルドと組み合わせることでDockerの中でもさらに軽量で安全な実行環境を用意することができる ポイント3: コスト IoCの時に紹介したようにDevOps的な観点からもコストメリットがある また、開発環境をそれぞれで構築する必要がなく、Docker Engineが動いているOSであればすぐに環境を構築できるという点でも人的リソースを削除できると考えられる ポイント4: portable 開発中のソフトウェアを他のエンジニアと共有したり、 ソフトウェアを面倒な環境構築をさけてサクッと試してもらいたい時などはもはや必須の技術といえるんじゃなかろうか 無料だし（なんか最近Docker Desktopの制約付き有料化の流れもあるけど） 自分は仕事仲間とアプリケーションを共有したり、試したいOSSがあったりすると必ずと言っていいほどDockerを利用している そのportableな性質を利用してマイクロサービスを開発するときにも利用される ポイント5: DevOps DevOpsはソフトウェア開発と運用が密接に連携することにより、柔軟かつスピーディーにシステムを提供するための考え方でCI/CDというプラクティスが有名 CI(Continuous Integration): ソースコードを変更するたびにビルドと単体テストを実行することで不整合を早期に発見し、開発者の定常作業の効率化を見込むことができる CD(Continuous Delivery): CIを完了したアプリケーションを定期的にテスト環境へ配置し、常に動作可能な最新状態のアプリケーションを維持するプロセスを自動化すること。 本番環境にリリースするプロセスも自動化するCD(Continuous Deploy)という考え方もある DockerはCI/CDとの相性がよく、Jenkinsなどのビルドパイプラインツールと組み合わせて使われる 個人的な推しポイント: Orchestration toolの存在 オーケストレーションツールのKubernetes (a.k.a k8s)など、コンテナ化仮想化アプリケーションの管理を行うツールの存在がある k8sを簡単に説明すると複数のDocker containerを管理する仕組みを提供しているソフトウェアである。 Dockerで定義したアプリケーションを簡単にスケール・管理することができる。 管理しているContainerがシャットダウンしても自動で定義された状態を保とうとする自己回復機能などがある。 ","date":"2021-11-01","objectID":"/docker/:1:1","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"これだけ覚えておきたいDockerの使い方 Docker Image: Docker Containerのベースとなるアーカイブパッケージのこと。Docker Hubなどで配布されている Docker Container: Docker Imageを元に作成するアプリケーション実行環境。Dockerfileを用いてDocker Imageを拡張できる ","date":"2021-11-01","objectID":"/docker/:2:0","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"Dockerfile 配布されているDocker ImageをベースにDockerfileに定義した内容で新しいDocker Imageのビルドを行える Dockerfileに記述できる命令の一部を紹介 Command Description FROM Dockerfile のベースイメージを設定 LABEL ラベルの設定。MAINTAINER とかも時が経ちこれで指定させるようになりました ADD イメージへファイルをコピー。他の選択肢として COPY や RUN curl なども選択肢にある（詳しい違いは省略） COPY イメージへファイルをコピー RUN 指定された命令とコンテナ内で実行 CMD コンテナ起動後に指定された命令を実行 ENTRYPOINT コンテナ起動時に実行される実行可能ファイルを設定 ENV イメージ内の環境変数を設定し、記述以降参照可能 EXPOSE Dockerに対し、プロセスが指定されたポート、もしくはポート群で待ち受けを行うことを指定 WORKDIR これ以降のRUN、CMD、ENTRYPOINT、ADD、COPYで使われる作業ディレクトリを設定 Dockerfileは以下のように定義する FROM debian RUN apt update \u0026\u0026 apt install -y cowsay fortune COPY entrypoint.sh / ENTORYPOINT [\"/entrypoint.sh\"] entrypoint.shという名前のbashを以下のように定義する #!/bin/bash if [ $# -eq 0];then /usr/games/fortune | /usr/games/cowsay else /usr/games/cowsay \"$@\" fi ではターミナルで上記ファイルを配置したディレクトリまで移動して以下を実行してビルドする $ docker build -t cowsay . 作業ディレクトリ配下のDockerfileののビルドが行われ、ローカルにcowsayという名前のDocker Imageが保存される 以下のコマンドでローカルに保存されたイメージは確認できる $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE cowsay latest a1ab28168777 About a minute ago 191MB そしてDocker Containerの立ち上げpenDialogは以下のように実行する $ docker run cowsay $ docker run cowsay ________________ \u003c Chess tonight. \u003e ---------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || 引数を変えながら動きを見てみる $ docker run cowsay 楽しいDocker __ \u003c 楽しいDocker \u003e -- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ここでは牛のお話内容が変わるだけの分岐をbashで実行しているが、引数をtestとするとテストを実行したりするようにするような利用ケースが考えられる Multi-Stage build Dockerの公式ドキュメントにGolangの環境構築例が取り上げられていたので、そのまま持ってくる 以下のようなDockerfileを用意する FROM golang:1.16 AS builder WORKDIR /go/src/github.com/alexellis/href-counter/ RUN go get -d -v golang.org/x/net/html COPY app.go ./ RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . FROM alpine:latest RUN apk --no-cache add ca-certificates WORKDIR /root/ COPY --from=builder /go/src/github.com/alexellis/href-counter/app ./ CMD [\"./app\"] ビルド・実行を同じDockerfileで行うように設定することをマルチステージビルドという 「FROM golang」のイメージでビルドして、「FROM alpine」ではappを実行している 特徴的なのは10行目のCOPYでbuilderという名前をつけたImageでの成果物を2つ目のImageにCOPYするのを行なっている ","date":"2021-11-01","objectID":"/docker/:2:1","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"よく使うDockerコマンドまとめ debianコンテナを起動し、bashでログイン（-it でインタラクティブな端末で接続） $ docker container run -it debian /bin/bash current directoryをweb server の公開directoryにmountして起動する（–name でコンテナ名前を指定して起動、-v でローカルディレクトリのマウント、-p でポートの指定、ちなみに、-d でバックグラウンドで実行） $ docker container run --name okmt-httpd -p 8080:80 -v \"$PWD:/usr/local/apache2/htdocs/ httpd:2.4\" コンテナ一覧を表示（-a optionでexitedなcontainerも表示） $ docker container ls コンテナ削除 $ docker container rm \u003cContainer ID\u003e 停止したコンテナIDを全て表示 $ docker container ls -aq -f status=exited つまり以下のようにすると停止したコンテナを全て削除できる $ docker continaer rm -v $(docker container ls -aq -f status=exited) コンテナの詳しい情報（引数、状況、ネットワーク構成）を表示 $ docker container inspect okmt-httpd コンテナ内で変更されたファイルのリストを表示 $ docker container diff okmt-httpd コンテナのログを表示（-f で表示し続ける) $ docker container logs okmt-httpd ","date":"2021-11-01","objectID":"/docker/:2:2","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"Docker Composeについて Docker Composeは複数のコンテナを定義し実行するツールで、yamlファイルを入力とする。 例えばNginxでホストにあるhtmlディレクトリにあるhtmlを配信するような設定のdocker-compose.ymlの記述は以下のように書ける version:'3'services:nginx:container:nginx:latestports:- \"80:80\"volumes:- ./html:/usr/share/nginx/html このdocker-compose.ymlが存在するディレクトリにnginxで配信したい.htmlファイルを用意したhtmlというディレクトリを用意し、以下のコマンドを実行する $ docker-compose up 記述方法は是非公式などを確認してほしい ローカルのファイルをマウントしたりアプリケーションをカスタマイズ実行しようとするとdockerコマンドの引数が長くなってくると思うのでComposeを活用しよう ","date":"2021-11-01","objectID":"/docker/:2:3","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"参考書の紹介 書籍に書いてある内容とこの記事の中身はそこまで関係ないので以下の感想を読んでみて気になる人は実際に読んでみてね さわって学ぶクラウドインフラ docker基礎からのコンテナ構築 | 日経BP 図表や説明などは分かりやすく、初学者にとってはとっつきやすい本だと感じた タイトルは\"クラウド\"に限定されているように見えるが中身はタイトルほど\"クラウド\"に限定していないように見える（そもそも Docker が\"クラウド\"のためだけのインフラでないことは明確ですが） Dockerに関する作業は全てAmazon EC2のUbuntu上で行うが、ローカルで行っても差分がない内容ではある 本の後半ではk8sに関する内容がまとめられていて、とてもわかりやすい説明だったと思う Docker | O’REILLY 難易度としては上の本よりも数段上にあり、Docker や Docker の構成要素を少し深くまで学習することができた Ansible や Trition などの Docker が関連するソフトウェアも幅広く紹介していて、知識の幅も広がる 一方でポイントを絞って学ぶという観点では範囲が広すぎるので、 「俺はDockerを使うのに必要最小限の知識だけあればいいぜ！」という人には向いていない本かもしれない 幅広く、でも周辺ソフトウェアも取りこぼしたくなかったので、上の本と組み合わせて学習することに ","date":"2021-11-01","objectID":"/docker/:3:0","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"総括 ちなみにGoogleは全ての開発をDockerでやっている Containerを利用できるクラウドサービスも増えてきているしやk8sもアツいし、 今後、Dockerはアプリケーションエンジニアの必須な技術スタックになってくると思う ","date":"2021-11-01","objectID":"/docker/:4:0","tags":["Docker","CI/CD","Infrastructure as Code","DevOps","Linux"],"title":"Docker の基礎と学び方","uri":"/docker/"},{"categories":["Diary"],"content":"Compact-CAS (Compact-CameraAndStorage) 高齢化による空き巣の増加やコロナを考慮した外出自粛で監視カメラを設置する需要は増していると思う しかし、監視カメラの導入は初期費用で数万飛ぶだけでなく、データを貯めようとするとクラウドを利用したりして月額利用料なども支払う必要がある さらに、昨今の人工知能分野の発展でデータさえあれば何か面白いことができてしまうのでできたりするのでデータはたくさん蓄えておきたい この大金の捻出はIoTの民主化で解決できる 今日は安価に手元で監視カメラシステムを構築できるOSSの Compact-CAS を紹介したい Compact-CAS (Compact-CameraAndStorage) This is Compact-CAS (Compact-CameraAndStorage), which provides cameras, storage, and even a web service to check the data. Based on this manual, you can inexpensively build a surveillance camera system for which you want historical data. All you need is as simple as a single Linux machine (e.g. Ubuntu, Raspberry Pi OS), a camera (e.g. sensor type, USB connected), and storage (e.g. SSD, HDD). こう書いてあるけど、簡単にいうと「Webカメラで動体検知して画像・動画をSSDに保存していく、ストレージ一体化の監視カメラ」のことである 値段はSSDを含めた全てのパーツを集めたとしてもおよそ12,000円程度だろう 簡単に全体構成を見ていこう カメラはmotionを用いて動画の録画、動体感知、書き込みディレクトリなどを設定している ログ表示にはApacheのlist directoryをそのまま用いているのだけど、日付ごとに違うdirectoryに保存しているので、このままでも比較的過去のログは追いやすい Linuxのsystemdの設定で一定時間経過した映像の自動削除機能がある 既存のサービスと比較したものを表を作ってみた（雑に調べたので間違った情報も含みますが申し訳ありません。嘘を嘘と見抜けない人はインターネットを〜以下略） ","date":"2021-10-01","objectID":"/ccas/:1:0","tags":["Rasberry Pi","c-cas","onpremise","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"既存サービスとの比較 比較観点は以下の5つを勝手に定義させていただいた Type: クラウド型SaaS/OSS/導入型（オンプレミスに製品やパッケージソフトウェアなどをメーカー主導で導入する方法） Management Console: 管理を助けるGUIが提供されているか（管理が容易にできるなら○、データ確認機能だけなら△、それもないならx） Scalability: システムを自由に拡張できるか（SaaSならAPIや自社ストレージへの自動データ保存機能などの拡張機能が充実しているか） Storage: データ保存（無制限ダウンロードや自社ストレージへの自動保存は○、制限付きダウンロード機能はx） Cost: 導入費用や月間使用料などの金銭的コスト ○: 優れている/△: どちらでもない/x: 優れていない Product Type Management Console Scalability Storage Cost Compact-CAS OSS △ ○ ○ ○ safie クラウド型SaaS ○ ○ △ △ Eagle Eye クラウド型SaaS ○ △(※1) △ ? ELMO QBiC CLOUD クラウド型SaaS ◯ △ ○ △ Panasonic BUSINESS 導入型 △/x（※2） △（※3） ○ x ※1: カメラがマルチベンダーシステムで選択可能なため△ ※2: ローカルストレージに保存する設計/専用機器を導入 ※3: 自由に設計できる可能性を残すがメーカー特有のソフトウェアパッケージを利用する部分は融通が効かないと考えられるため Storageという観点はAI/Deep Learningなどで解析を行う際にデータ量が必要になるが、その際に全てのデータを保存できていることが望ましいのでデータ取得後分析したいなどの需要があれば重要である 一方で制限付きダウンロードを提供しているSaaSでもタイムラプス動画が70時間や100時間などのみで解析可能という手法もあるのでよく考えて導入されたい safieは工事して導入/工事できないような場所に導入/来客をカウントしながらの監視/自宅への監視導入など様々なケースを想定したプロダクトを提供しており、小売・飲食などの小規模事例から工場のライン工に至るまでの大規模な導入ケースもある ELMO QBiC CLOUDはサービス説明書が公開されているがかなり丁寧で印象が良い NTT Communicationsのcoomonitaとか便利そうだとサービスの中でSafie製品も取り扱ってるしどーゆー立場なのか分からないので表からは退けておいたやつが何個かある 雑な表だが表を作成したのは2021年7月ごろで調べた資料のバイアスもかかってるだろうし、抜け漏れなども勘弁されたい ","date":"2021-10-01","objectID":"/ccas/:1:1","tags":["Rasberry Pi","c-cas","onpremise","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"pssh を使った RPi の複数台セッティング カメラ 1台、SSD 1台で Compact-CAS 運用する方法は上記のドキュメントの方にまとめてあるので、ここでは複数台同時に setting する方法を紹介する pssh は SSH の並列実行できるコマンドで、Ubuntu や Mac、Windows で配布されている これを使って4台のRPiに同時にCompact-CASをインストールしていこうと思ふ PRi の setup は各自に任せる 自分は Ubuntu 20.04 LTS をインストールした microSD を RPi4 に差して、ネットワークを固定IPを振って ssh鍵認証、SSHポート変更、まで set up した状態からスタートする Mac で brew が使えるなら以下で入る $ brew install pssh psshのファイルができたら、なんでも良いのでファイルを作ってそこにsshしたいホストを列挙していく 私は以下のファイルをccas.txtという名前で保存した ccas1 ccas2 ccas3 ccas4 .ssh/configはこんな感じで用意した $ cat .ssh/config Host ccas1 HostName 172.16.0.40 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt Host ccas2 HostName 172.16.0.41 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt Host ccas3 HostName 172.16.0.42 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt Host ccas4 HostName 172.16.0.43 User okmt Port 10022 IdentityFile ~/.ssh/id_rsa_okmt これで実行したいコマンドとccas.txtをpsshに渡すと、各RPiで並列的にコマンドが実行できる $ pssh -h ccas -i \"ls\" [1] 23:18:56 [SUCCESS] ccas1 Desktop Documents Downloads Music Pictures Public Templates Videos [2] 23:18:56 [SUCCESS] ccas3 ... [3] 23:18:56 [SUCCESS] ccas2 ... [4] 23:18:56 [SUCCESS] ccas4 ... 以上の結果、txtファイルの順番通りじゃないのは、コマンドの実行結果が返却された順番に出力されているからなのかなと思う 余談だけど ccas1 は Ubuntu Desktop なので default で Desktop や Downloads が生成されているけど、ccas2-4 は Ubuntu Server なので初期状態の home directory には何もない sudo は以下のコマンドのようにして、適当なファイルにパスワードを書いてそれを読み込ませる $ cat passwd | pssh -h ccas -x '-tt' --inline-stdout -I \"sudo whoami\" [1] 23:41:01 [SUCCESS] manager1 [sudo] password for okmt: root [2] 23:41:03 [SUCCESS] ccas3 [sudo] password for okmt: root [3] 23:41:03 [SUCCESS] ccas2 [sudo] password for okmt: root まぁこれでなんとか無理やりsudoを使ったけど、.*_history に入るよりはマシな運用だと思って見逃されたい 用済みになったパスワード直書きファイルは必ず削除してください てことでgithubの手順通りCompact-CASをインストールする $ cat passwd | pssh -h ccas -x '-tt' --inline-stdout -I \"sudo apt install -y v4l-utils\" ","date":"2021-10-01","objectID":"/ccas/:1:2","tags":["Rasberry Pi","c-cas","onpremise","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"USBTemper ここからは同じようにUSB接続できるセンサーから温度も測りたいという方に紹介したい USBTemper、一見ものすごく怪しい製品だけど、SwitchBotに比べて1,000yen安い Ubuntu 20.04 on RPi に hcitool をインストールする hcitoolをUbuntu 20.04に入れる際に若干詰まった 依存しているパッケージを導入してbluetoothに関するソフトウェアを適切に配置・設定する必要がある $ sudo apt-get update $ sudo apt-get install libdbus-1-dev libdbus-glib-1-dev libglib2.0-dev libical-dev libr eadline-dev libudev-dev libusb-dev make $ cd /usr/src/ $ sudo wget https://www.kernel.org/pub/linux/bluetooth/bluez-5.34.tar.xz $ sudo xz -d bluez-5.34.tar.xz $ sudo tar xvf bluez-5.34.tar $ cd bluez-5.34 $ sudo ./configure --disable-systemd $ sudo make $ sudo make install debian系だと同じように入れれると思う 精度は…ちょっと低いかも。常に+2度くらいの温度が計測される USB方向転換機とか使えば温度は逃がせそう ","date":"2021-10-01","objectID":"/ccas/:1:3","tags":["Rasberry Pi","c-cas","onpremise","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"IoTに関する情報収集 何かやろうと思ったことがあるときに踏み抜かれていないバグなどに遭遇し抜け出せずに失敗することもあるが、根気よく頑張れば成功したりもする 一般的な知識などに関してはとにかくggrか、TECHFEEDなどの情報サイトで情報でIoTのタグをフォローしておくとかは忙しい人からすると結構良いと思う SORACOMなどが主催するカンファレンスなどに参加する 資格とかだとIoTシステム技術検定とか…？（高いし民間試験なので持っているメリットが高いとは思わないけれど） ","date":"2021-10-01","objectID":"/ccas/:2:0","tags":["Rasberry Pi","c-cas","onpremise","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"終わりに 今回の自立型の監視カメラシステムの実装には難解なプログラミングも必要もない このような基本的なIoT構築は個人レベルで簡単に行うことができる ところで実家の畑に複数種類の動物が出現して野菜を荒らしているらしい… これを踏まえてCompact-CASをベースに暗視できるようなセンサを用いて野外用監視カメラシステムを組んでみることを考えている ","date":"2021-10-01","objectID":"/ccas/:3:0","tags":["Rasberry Pi","c-cas","onpremise","Linux"],"title":"Raspberry Piで完結する監視カメラシステム Compact-CameraAndStorage","uri":"/ccas/"},{"categories":["Diary"],"content":"LPIC（Linux Professional Institute Certification） Linux と仲良くするために区切りもあった方が良いだろうと資格調べてたらこれに出会ったし、電光石火の如く資格を取得してきた LPIC (Linux Professional Institute Certification) Linux Essentials は、Linux を初めて使用する方のためのプロフェッショナル開発認定プログラムです。Linux Essentials の認定資格は、Linux でキャリアをスタートする人や、基本的な Linux スキルを証明したい IT 部門の方々に最適です。 LinuC との違いは気にするな、多分ちゃんと Linux 分かってればどっちも受かる 主は LPIC 派ということ。それだけ。 ","date":"2021-09-01","objectID":"/lpic1/:1:0","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"勉強方法 前提として主は新卒1年目のソフトウェアエンジニアだけど普段の仕事が Linux と関わり深いわけではないので、同じような境遇の方に参考になるのではなかろうか 教材は何を使っても大差ないんだろうな、と思っている 主はこの一冊しか使っていないです。（あずき本とかping-tとかもいっさい触らず） 大体の人は 「あずき本 -\u003e 問題集 -\u003e ping-t」 「あずき本 -\u003e ping-t」 とかだと思うのでコスパ目指すならそっちの方が良いと思う。知らんけど 各試験勉強期間は 2 weeks くらい 主は意外なことに平日はちゃんと働いていて、仕事後に毎日ちょっとずつって感じ 問題集を2周読んだあたりからなんかいける気がしたので受験した。 ","date":"2021-09-01","objectID":"/lpic1/:1:1","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"受験 近くのセンターで受験したけど Online Exam もできるので、会場に行くのが嫌な人はそっちを選ぼう あと、あまり色んなブログで言及はされてないけど、日本語問題文が思ってたよりひどい 特に自分の場合は LPIC 102 がひどかった 「コマンドの結果が印刷される」って問題文があったので、cups (common UNIX printing system) の話かと思ったけど、 違和感を感じたので英語文を表示してみると「printing out」が「出力」でなく「印刷」と訳されているだけでした あと「リーティングプロトコル」という謎の言葉も出きていたが、英語文をみると「Routing Protocols」であったり、 問題文が「example.com」なのに回答が全て「example.org」となっていたり、、、、 それを除くと、「こんなん解けるか！」っていう激ムズ問題は1, 2問くらいしかなかったのでちゃんと勉強した人は良心的な試験と言えるかも（なら主はもっと点数とれ） ","date":"2021-09-01","objectID":"/lpic1/:1:2","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"受験結果 にしても60問ってどう考えても少ないなって思うな、自分は LPIC 101 も LPIC 102 も試験開始10分で復習まで終わって回答終了ボタン押して退室した 知ってるか知らないかの問題が多いので大体の人こうなると思う ただ、思ったより結果良くなかったので慢心は良くないと感じた Title score Date LPIC 101 640/800 2021/07/24 LPIC 102 630/800 2021/08/29 他の人のブログでは 750 とか取ってる人いるけど、暗記完璧ですげぇ…とか思っている LPIC level 2 も問題集眺めてる感じ難易度はそんなに変わらなさそうなので早めに受けたいなー LPIC に関してはLinux の知識さえ入ればよくて落ちても良いくらいに思ってるんですが、最高レベル到達まで試験5つってやっぱ多すぎん？ ","date":"2021-09-01","objectID":"/lpic1/:1:3","tags":["Certification","LPIC","Linux"],"title":"LPIC level 1を取得した","uri":"/lpic1/"},{"categories":["Diary"],"content":"静的サイトジェネレータ（Static Site Generator） SSGは入力ファイルから静的ページを構築するためのツール 表で紹介するものはMarkdownコンテンツを取り込み、テンプレートを適用してCMS用ですぐ利用できるもので、本 Blog では Hugo を使っている SSG Framework Lang Description Hugo Golang ナウいしビルド早い Gatsby JavaScript (React) ナウいしテーマ多い Jykill Ruby 古い 表に知名度と自由度の高い Next.js Nuxt.js は入れてないヨ 動的 CMS には WordPress なんかがあって、これはユーザがサイトにアクセスするたびに必要に応じてページを構築する 静的 CMS は Adobe Dreamweaver や Movable Typed 等でこれは SSG と同じ仕組みで動いている 実は自分用のメモとかには Jykill 使ってて、ローカルに Git Repository 立ててメモを管理している 記事やメモを色んな Server から Origin にアップし続けるだけでドキュメントがウェブサービスで見れるようになるので便利だなー、と。 体感したことはないけど、Jykill は Hugo なんかよりビルド速度がかなり遅いらしい Gatsby はフロントエンドエンジニアとの相性が良いように思える ","date":"2021-08-28","objectID":"/hugo/:1:0","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Diary"],"content":"Hugoの利用 Hugo のインストールは公式インストール方法通り よく使う hugo コマンドだけ軽くまとめた Command Description hugo ビルドを行う hugo check ビルドできるかチェックする hugo server ビルドを行なってサーバを立てる hugo server -p 8080 ビルドを行なってポート指定してサーバを立てる ","date":"2021-08-28","objectID":"/hugo/:1:1","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Diary"],"content":"テーマの適用 公式サイトで紹介されているhugo themesの中から好きなテーマを選び放題 テーマの適用方法は 公式Manual通りでできそう LoveIt という誰もが使いそうな Lovery な Theme があるので、このサイトでもそれを使っている Theme Loveit ただ、自分の場合は、hugo serveでエラーが出たので、(このサイト)[https://zhuanlan.zhihu.com/p/262906525]の内容を実装しないと hugo serve が実行できなかった。 Hugo は基本的には Markdown で記述できるが、Inline HTML も使えるので、拡張性にはさほど困らない。 Markdown Syntax for LoveIt 数式表現がTEXでできるのは個人的にポイント高い \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 使いたい画像が png であることが多く、よく ImageMagick を使って jpg に変換する $ convert hogehoge.png -quality 100 hogehoge.jpg ","date":"2021-08-28","objectID":"/hugo/:1:2","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Diary"],"content":"Docker でビルドしてデプロイ Hugo を Docker で扱うには、こんなイメージもあるのでそれを利用して、Deployまで持っていけると思う ただ、hugo serverで実行した場合は、huge server なるもので配信しているのでこれを nginx で配信するようにしたい hugo server は公式では「A high performance webserver」って紹介されていて、ほんまか？って感じやけど、同時に Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy. ということでもあるのでこだわる人は Apache やら Nginx に乗り換えるのが良さそう とりま Hugo が動く Dockerfile は発見 Dockerfile | hugo-extended-docker これを元に作ってみる ","date":"2021-08-28","objectID":"/hugo/:2:0","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"},{"categories":["Diary"],"content":"docker-compose によるビルド 出来上がった docker-compose はこんな感じ hugo_nginx version: '3' services: hugo: build: ./hugo volumes: - ${PWD}/hugo:/src nginx: build: ./nginx depends_on: - hugo ports: - \"8081:80\" volumes: - ./hugo/public:/usr/share/nginx/html hugo image で build し、nginx で出来上がった静的ファイルを配信している これを使用方法は $ docker-compose up で hugo による build が走り、変更が反映されて Nginx で配信される Build も Deploy も Theme には依存していないので任意の hugo project に使用できると思います。 hugo の Build 早いなぁ、Nginx の server 起動の方が時間かかってそう FROMが複数あるDockerfileを docker docs で言われるところのマルチステージビルドにはなっていないので注意すること マルチステージビルド(multi stage build) マルチステージビルドはめっちゃ簡単にいうと Dockerfile に FROM が複数指定されていて、各レイヤをできる限り小さく保ち、効率的なビルド環境を構築すること こんな感じの記事を月一くらいで書けたらな、と思っているので良いなと思ったら記事のシェアとかTwitterをフォローしてください。 ","date":"2021-08-28","objectID":"/hugo/:2:1","tags":["Static Site Generator","Hugo","Docker","Onpremise"],"title":"Hugoにテーマを適用し、自動ビルド後にNginxでデプロイするDocker環境を作る","uri":"/hugo/"}]